{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":""},{"location":"#npm-package","title":"NPM Package","text":"<pre><code>yarn add molstar\n</code></pre> <p>or</p> <pre><code>npm install molstar\n</code></pre> <p>Mol* code can then be imported from the <code>molstar/lib/...</code> namespace, e.g.</p> <pre><code>import { PluginContext } from 'molstar/lib/mol-plugin/context';\n</code></pre>"},{"location":"#clone-from-github","title":"Clone from GitHub","text":"<pre><code>git clone https://github.com/molstar/molstar.git\ncd molstar\nnpm install\nnpm build\n</code></pre> <p>For a watch task to automatically rebuild the source code on changes, run</p> <pre><code>npm run watch\n</code></pre> <p>or if working just with the Viewer app for better performance</p> <pre><code>npm run watch-viewer\n</code></pre>"},{"location":"data-access-tools/convert-to-bcif/","title":"Convert CIF to BinaryCIF","text":"<p>BinaryCIF is an efficient, binary flavor of the CIF format. See specification and publication for further details.</p> <p>This script reads data in CIF format and converts it lossless to a BinaryCIF file that can be read by Mol* or other  applications.</p>"},{"location":"data-access-tools/convert-to-bcif/#example","title":"Example","text":"<pre><code>node lib/commonjs/cli/cif2bcif/index.js file.cif file.bcif\n</code></pre>"},{"location":"data-access-tools/convert-to-bcif/#usage","title":"Usage","text":"Argument Description <code>src</code> Source CIF to convert (can be gzipped) <code>out</code> Generated BinaryCIF output path <code>-c</code> Path to optional config file <code>-f</code> Path to optional filter file <pre><code>index.js [-h] [-c CONFIG] [-f FILTER] src out\n</code></pre>"},{"location":"data-access-tools/convert-to-bcif/#config-file","title":"Config file","text":"<p>Controls how certain columns will be encoded. This is a JSON array of instructions: <pre><code>interface EncodingStrategyHint {\n    categoryName: string,\n    columnName: string,\n    encoding: 'pack' | 'rle' | 'delta' | 'delta-rle',\n    precision?: number\n}\n</code></pre> Identify a particular CIF columns by its name and override the encoding by Integer Packing, Run-Length Encoding, Delta  Encoding, or Delta &amp; Run-Length Encoding. You can optionally control the precision if dealing with float values.</p>"},{"location":"data-access-tools/convert-to-bcif/#filter-file","title":"Filter file","text":"<p>Specifies which categories and columns will be written. This is a plain text file, each line represents one entry.  You can specify explicitly which categories or columns to include by adding <code>category_name</code> or  <code>category_name.field_name</code>. You can also choose to ignore some categories or columns by adding <code>!category_name</code> or  <code>!category_name.field_name</code>.</p>"},{"location":"data-access-tools/create-ccd-table/","title":"Create Table from CCD","text":"<p>The Chemical Component Dictionary (CCD) is as an external reference file describing  all residue and small molecule components found in PDB entries. The  Protonation Variants Companion Dictionary (PVCD) enumerates protonation variants of canonical amino acids.</p> <p>This script bundles all <code>chem_comp_bond</code> information from the CCD and the PVCD into a single file for later use. Optionally, it can also generate a second output file that contains all <code>chem_comp_atom</code> information.</p>"},{"location":"data-access-tools/create-ccd-table/#example","title":"Example","text":"<pre><code>node --max-old-space-size=4096 lib/commonjs/cli/chem-comp-dict/create-table.js build/data/ccb.bcif -b\n</code></pre>"},{"location":"data-access-tools/create-ccd-table/#usage","title":"Usage","text":"Argument Description <code>out</code> Generated file output path <code>--forceDownload</code>, <code>-f</code> Force download of CCD and PVCD <code>--binary</code>, <code>-b</code> Output as BinaryCIF <code>--ccaOut</code>, <code>-a</code> File output path of optionally generated chem_comp_atom <pre><code>create-table.js [-h] [--forceDownload] [--binary] [--ccaOut CCAOUT] out\n</code></pre>"},{"location":"data-access-tools/extract-ccd-ions/","title":"Extract Ions from CCD","text":"<p>The Chemical Component Dictionary (CCD) is as an external reference file describing  all residue and small molecule components found in PDB entries.</p> <p>This script extracts all ions from the CCD and provides their names as TypeScript set.</p>"},{"location":"data-access-tools/extract-ccd-ions/#example","title":"Example","text":"<pre><code>node --max-old-space-size=4096 lib/commonjs/cli/chem-comp-dict/create-ions.js src/mol-model/structure/model/types/ions.ts\n</code></pre>"},{"location":"data-access-tools/extract-ccd-ions/#usage","title":"Usage","text":"Argument Description <code>out</code> Generated file output path <code>--forceDownload</code>, <code>-f</code> Force download of CCD <pre><code>create-ions.js [-h] [--forceDownload] out\n</code></pre>"},{"location":"data-access-tools/model-server/","title":"Model Server","text":"<p>Provides access to molecular 1D, 2D, and 3D (sub-)structure models of molecules. Substructures are described by the  mol-script (MolQL) language. It has the ability to include additional data to mmCIF \u201con the fly\u201d, e.g. integrate  primary PDB archival data from Chemical Component Dictionary (CCD),  Protonation Variants Companion Dictionary (PVCD) and  Biologically Interesting moleculeReference Dictionary (BIRD). </p>"},{"location":"data-access-tools/model-server/#example","title":"Example","text":"<pre><code>node lib/commonjs/servers/model/server --sourceMap pdb-bcif '/opt/data/bcif/${id}.bcif'\n</code></pre>"},{"location":"data-access-tools/model-server/#usage","title":"Usage","text":"Argument Description <code>--version</code>, <code>-v</code> Show program's version number and exit. <code>--cfg</code> JSON config file path. If a property is not specified, cmd line param/OS variable/default value are used. <code>--printCfg</code> Print current config for validation and exit. <code>--cfgTemplate</code> Prints default JSON config template to be modified and exit. <code>--apiPrefix</code> Specify the prefix of the API, i.e. &lt;host&gt;/&lt;apiPrefix&gt;/&lt;API queries&gt; <code>--defaultPort</code> Specify the port the server is running on <code>--cacheMaxSizeInBytes</code> Read structures are cached, this specifies the cache size, 0 for off. <code>--cacheEntryTimeoutMs</code> Specify in ms how long to keep entries in cache. <code>--requestTimeoutMs</code> The maximum number of ms the server spends on a request. <code>--queryTimeoutMs</code> The maximum time the server dedicates to executing a query in ms. Does not include the time it takes to read and export the data. <code>--shutdownTimeoutMinutes</code> Server will shut down after this amount of minutes, 0 for off. <code>--shutdownTimeoutVarianceMinutes</code> Modifies the shutdown timer by +/- <code>timeoutVarianceMinutes</code> (to avoid multiple instances shutting at the same time) <code>--maxQueryManyQueries</code> Maximum number of queries allowed by the query-many at a time <code>--defaultSource</code> modifies which 'sourceMap' source to use by default <code>--sourceMap</code> Map <code>id</code>s for a <code>source</code> to a file path. Example: <code>pdb-bcif '../../data/bcif/${id}.bcif'</code> - JS expressions can be used inside <code>${}</code>, e.g. <code>${id.substr(1, 2)}/${id}.mdb</code> Can be specified multiple times. The <code>SOURCE</code> variable (e.g. <code>pdb-bcif</code>) is arbitrary and depends on how you plan to use the server. Supported formats: cif, bcif, cif.gz, bcif.gz <code>--sourceMapUrl</code> Same as <code>--sourceMap</code> but for URL. <code>--sourceMapUrl src url format</code> Example: <code>pdb-cif \"https://www.ebi.ac.uk/pdbe/entry-files/download/${id}_updated.cif\" cif</code> Supported formats: cif, bcif, cif.gz, bcif.gz <pre><code>node lib/commonjs/servers/model/server [-h] [-v]\n        [--cfg CFG]\n        [--printCfg]\n        [--cfgTemplate]\n        [--apiPrefix PREFIX]\n        [--defaultPort PORT]\n        [--cacheMaxSizeInBytes CACHE_SIZE]\n        [--cacheEntryTimeoutMs CACHE_TIMEOUT]\n        [--requestTimeoutMs REQUEST_TIMEOUT]\n        [--queryTimeoutMs QUERY_TIMEOUT]\n        [--shutdownTimeoutMinutes TIME]\n        [--shutdownTimeoutVarianceMinutes VARIANCE]\n        [--maxQueryManyQueries QUERY_MANY_LIMIT]\n        [--defaultSource DEFAULT_SOURCE]\n        [--sourceMap SOURCE PATH]\n        [--sourceMapUrl SOURCE PATH SOURCE_MAP_FORMAT]\n</code></pre>"},{"location":"data-access-tools/model-server/#production-use","title":"Production Use","text":"<p>In production, it is required to use a service that will keep the server running, such as forever.js.</p>"},{"location":"data-access-tools/model-server/#memory-issues","title":"Memory Issues","text":"<p>Sometimes nodejs might run into problems with memory. This is usually resolved by adding the <code>--max-old-space-size=8192</code> parameter.</p>"},{"location":"data-access-tools/model-server/#preprocessor-example","title":"Preprocessor Example","text":"<p>The preprocessor application allows addiing custom data to CIF files and/or  convert CIF to BinaryCIF. <pre><code>node lib/commonjs/servers/model/preprocess\n</code></pre></p>"},{"location":"data-access-tools/model-server/#preprocessor-usage","title":"Preprocessor Usage","text":"Argument Description <code>--input</code>, <code>-i</code> Input filename <code>--outCIF</code>, <code>-oc</code> Output CIF filename <code>--outBCIF</code>, <code>-ob</code> Output BinaryCIF filename <code>--cfg</code>, <code>-c</code> Config file path <code>--folderIn</code>, <code>-fin</code> Convert folder <code>--folderOutCIF</code>, <code>-foc</code> Convert folder text output <code>--folderOutBCIF</code>, <code>-fob</code> Convert folder binary output <code>--folderNumProcesses</code>, <code>-fp</code> Convert folder number processes <p>Example cfg.json: <pre><code>{ \n    \"numProcesses\": 1, \n    \"customProperties\": { \n        \"sources\": [ \"wwpdb\" ], \n        \"params\": { \n            \"wwPDB\": { \n                \"chemCompBondTablePath\": \"./build/data/ccb.bcif\"\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"data-access-tools/model-server/#local-mode","title":"Local Mode","text":"<p>The server can be run in local/file based mode using <pre><code>node lib/commonjs/servers/model/query\n</code></pre></p>"},{"location":"data-access-tools/model-server/#custom-properties","title":"Custom Properties","text":"<p>This feature is still in development.</p> <p>It is possible to provide property descriptors that transform data to internal representation and define how it should  be exported into one or mode CIF categories. Examples of this are located in the <code>mol-model-props</code> module and are  linked to the server in the config and <code>servers/model/properties</code>.</p>"},{"location":"data-access-tools/model-server/#from-npm","title":"From NPM","text":"<pre><code>npm install --production molstar\ncd ./model-server \n</code></pre> <p>(or <code>node node_modules\\.bin\\model-server</code> in Windows).</p> <p>The NPM package contains all the tools mentioned in the previous sections as \"binaries\":</p> <ul> <li><code>model-server</code></li> <li><code>model-server-query</code></li> <li><code>model-server-preprocess</code></li> </ul>"},{"location":"data-access-tools/plugin-state-server/","title":"Plugin State Server","text":"<p>Provides a simple backend for online storing and sharing of Mol* sessions used by  <code>mol-plugin</code> and  <code>mol-state</code> modules.</p>"},{"location":"data-access-tools/plugin-state-server/#example","title":"Example","text":"<pre><code>node lib/commonjs/servers/plugin-state --workding-folder ~\n</code></pre>"},{"location":"data-access-tools/plugin-state-server/#usage","title":"Usage","text":"Argument Description <code>--working-folder</code> Working folder path <code>--port</code> Server port. Alternatively, use ENV variable PORT. <code>--api-prefix</code> Server API prefix <code>--max-states</code> Maximum number of states to save <pre><code>node lib/commonjs/servers/plugin-state [-h] --working-folder WORKING_FOLDER [--port PORT] [--api-prefix API_PREFIX] [--max-states MAX_STATES]\n</code></pre>"},{"location":"data-access-tools/volume-server/","title":"VolumeServer","text":""},{"location":"data-access-tools/volume-server/#what-is-volumeserver","title":"What is VolumeServer","text":"<p>Provides near-instantaneous access to volumetric data including density maps (for instance, from X-ray crystallography  or cryo-electron microscopy experiments), spatial distribution data, output from electrostatic calculations. It works by utilizing adaptive downsampling (similar to how Google Earth works). </p> <p>It uses the text based CIF and BinaryCIF formats to deliver the data to the client. </p> <p>For quick info about the benefits of using the server, check out the examples.</p>"},{"location":"data-access-tools/volume-server/#installing-and-running","title":"Installing and Running","text":"<p>Requires nodejs 8+.</p>"},{"location":"data-access-tools/volume-server/#from-github","title":"From GitHub","text":"<pre><code>git clone https://github.com/molstar/molstar\nnpm install\n</code></pre> <p>Afterwards, build the project source:</p> <pre><code>npm run build-tsc\n</code></pre> <p>and run the server by </p> <pre><code>node lib/commonjs/servers/volume/server\n</code></pre>"},{"location":"data-access-tools/volume-server/#from-npm","title":"From NPM","text":"<pre><code>npm install --production molstar\n./volume-server \n</code></pre> <p>(or <code>node node_modules\\.bin\\volume-server</code> in Windows).</p> <p>The NPM package contains all the tools mentioned here as \"binaries\":</p> <ul> <li><code>volume-server</code></li> <li><code>volume-server-pack</code></li> <li><code>volume-server-query</code></li> </ul>"},{"location":"data-access-tools/volume-server/#production-use","title":"Production use","text":"<p>In production it is required to use a service that will keep the server running, such as forever.js.</p>"},{"location":"data-access-tools/volume-server/#memory-issues","title":"Memory issues","text":"<p>Sometimes nodejs might run into problems with memory. This is usually resolved by adding the <code>--max-old-space-size=8192</code> parameter.</p>"},{"location":"data-access-tools/volume-server/#preparing-the-data","title":"Preparing the Data","text":"<p>For the server to work, CCP4/MAP (models 0, 1, 2 are supported) input data need to be converted into a custom block format.  To achieve this, use the <code>pack</code> application (<code>node lib/commonjs/servers/volume/pack</code> or <code>volume-server-pack</code> binary from the NPM package).</p>"},{"location":"data-access-tools/volume-server/#local-mode","title":"Local Mode","text":"<p>The program  <code>lib/commonjs/servers/volume/pack</code> (<code>volume-server-query</code> in NPM package) can be used to query the data without running a http server.</p>"},{"location":"data-access-tools/volume-server/#navigating-the-source-code","title":"Navigating the Source Code","text":"<p>The source code is split into 2 mains parts: <code>pack</code> and <code>server</code>:</p> <ul> <li>The <code>pack</code> part provides the means of converting CCP4 files into the internal block format.</li> <li>The <code>server</code> includes</li> <li><code>query</code>: the main part of the server that handles a query. <code>execute.ts</code> is the \"entry point\".</li> <li><code>algebra</code>: linear, \"coordinate\", and \"box\" algebra provides the means for calculations necessary to concent a user query into a menaningful response.</li> <li>API wrapper that handles the requests.</li> </ul>"},{"location":"data-access-tools/volume-server/#consuming-the-data","title":"Consuming the Data","text":"<p>The data can be consumed in any (modern) browser using the ciftools library (or any other piece of code that can read text or binary CIF).</p> <p>The Data Format document gives a detailed description of the server response format.</p> <p>As a reference/example of the server usage is available in Mol* <code>mol-plugin</code> module.</p>"},{"location":"data-access-tools/volume-server/#hosting-the-server","title":"Hosting the server","text":""},{"location":"data-access-tools/volume-server/#example","title":"Example","text":"<pre><code>node lib/commonjs/servers/volume/server --idMap x-ray '/opt/data/xray/${id}.mdb'\n</code></pre>"},{"location":"data-access-tools/volume-server/#usage","title":"Usage","text":"Argument= Description <code>--cfg</code> JSON config file path. If a property is not specified, cmd line param/OS variable/default value are used. <code>--printCfg</code> Print current config for validation and exit. <code>--cfgTemplate</code> Prints default JSON config template to be modified and exit. <code>--apiPrefix</code> Specify the prefix of the API, i.e. &lt;host&gt;/&lt;apiPrefix&gt;/&lt;API queries&gt; <code>--defaultPort</code> Specify the port the server is running on <code>--shutdownTimeoutMinutes</code> Server will shut down after this amount of minutes, 0 for off. <code>--shutdownTimeoutVarianceMinutes</code> Modifies the shutdown timer by +/- <code>timeoutVarianceMinutes</code> (to avoid multiple instances shutting at the same time) <code>--idMap</code> Map <code>id</code>s for a <code>type</code> to a file path. Example: <code>x-ray '../../data/mdb/xray/${id}-ccp4.mdb'</code> - JS expressions can be used inside <code>${}</code>, e.g. <code>${id.substr(1, 2)}/${id}.mdb</code> - Can be specified multiple times. - The <code>TYPE</code> variable (e.g. <code>x-ray</code>) is arbitrary and depends on how you plan to use the server. By default, Mol* Viewer uses <code>x-ray</code> and <code>em</code>, but any particular use case may vary. <code>--maxRequestBlockCount</code> Maximum number of blocks that could be read in 1 query. This is somewhat tied to the <code>maxOutputSizeInVoxelCountByPrecisionLevel</code> in that the <code>&amp;lt;maximum number of voxel&amp;gt; = maxRequestBlockCount * &amp;lt;block size&amp;gt;^3</code>. The default block size is 96 which corresponds to 28,311,552 voxels with 32 max blocks. <code>--maxFractionalBoxVolume</code> The maximum fractional volume of the query box (to prevent queries that are too big). <code>--maxOutputSizeInVoxelCountByPrecisionLevel</code> What is the (approximate) maximum desired size in voxel count by precision level - Rule of thumb: <code>&amp;lt;response gzipped size&amp;gt;</code> in <code>[&amp;lt;voxel count&amp;gt; / 8, &amp;lt;voxel count&amp;gt; / 4]</code>. The maximum number of voxels is tied to maxRequestBlockCount. <pre><code>node lib/commonjs/servers/volume/server [-h] [-v]\n        [--cfg CFG]\n        [--printCfg] \n        [--cfgTemplate]\n        [--apiPrefix PREFIX]\n        [--defaultPort PORT]\n        [--shutdownTimeoutMinutes TIME]\n        [--shutdownTimeoutVarianceMinutes VARIANCE] \n        [--idMap TYPE PATH]\n        [--maxRequestBlockCount COUNT] \n        [--maxFractionalBoxVolume VOLUME]\n        [--maxOutputSizeInVoxelCountByPrecisionLevel LEVEL [LEVEL ...]]\n</code></pre>"},{"location":"data-access-tools/volume-server/examples/","title":"VolumeServer Examples","text":""},{"location":"data-access-tools/volume-server/examples/#zika-virus","title":"Zika Virus","text":""},{"location":"data-access-tools/volume-server/examples/#1tqn","title":"1TQN","text":""},{"location":"data-access-tools/volume-server/how-it-works/","title":"How it Works","text":""},{"location":"data-access-tools/volume-server/how-it-works/#volumeserver-how-it-works","title":"VolumeServer: How it works","text":"<p>This document provides a high level overview of how the DensityServer works.</p>"},{"location":"data-access-tools/volume-server/how-it-works/#overview","title":"Overview","text":"<ul> <li>Data is stored in using block layout to reduce the number of disk seeks/reads each query requires.</li> <li>Data is downsampled by <code>1/2</code>, <code>1/4</code>, <code>1/8</code>, ... depending on the size of the input.</li> <li>To keep the server response time/size small, each query is satisfied using the appropriate downsampling level.</li> <li>The server response is encoded using the BinaryCIF format.</li> <li>The contour level is preserved using relative instead of absolute values.</li> </ul>"},{"location":"data-access-tools/volume-server/how-it-works/#data-layout","title":"Data Layout","text":"<p>To enable efficient access to the 3D data, the density values are stored in a \"block level\" format.  This means that the data is split into <code>NxNxN</code> blocks (by default <code>N=96</code>, which corresponds to <code>96^3 * 4 bytes = 3.375MB</code> disk read  per block access and provides good size/performance ratio).  This data layout  enables to access the data from a hard drive using a bounded number of disk seeks/reads which greatly reduces the server latency.</p>"},{"location":"data-access-tools/volume-server/how-it-works/#downsampling","title":"Downsampling","text":"<ul> <li>The input is density data with <code>[H,K,L]</code> number of samples along each axis (i.e. the <code>extent</code> field in the CCP4 header).</li> <li> <p>To downsample, use the kernel <code>C = [1,4,6,4,1]</code> (customizable on the source code level) along each axis, because it is \"separable\":</p> <pre><code>downsampled[i] = C[0] * source[2 * i - 2] + ... + C[4] * source[2 * i + 2]\n</code></pre> <p>The downsampling step is applied in 3 steps:</p> <pre><code>[H,K,L] =&gt; [H/2, K, L] =&gt; [H/2, K/2, L] =&gt; [H/2, K/2, L/2]\n</code></pre> <p>(if the dimension is odd, the value <code>(D+1)/2</code> is used instead).</p> </li> <li> <p>Apply the downsampling step iteratively until the number of samples along the largest dimension is smaller than \"block size\" (or the smallest dimension has &gt;2 samples).</p> </li> </ul>"},{"location":"data-access-tools/volume-server/how-it-works/#satisfying-the-query","title":"Satisfying the query","text":"<p>When the server receives a query for a 3D region, it chooses the the appropriate downsampling level based on the required details so that  the number of voxels in the response is small enough. This enables sub-second response time even for the largest of entries.</p>"},{"location":"data-access-tools/volume-server/how-it-works/#encoding-the-response","title":"Encoding the response","text":"<p>The BinaryCIF format is used to encode the response. Floating point data are quantized into 1 byte values (256 levels) before being sent back to the client. This quantization is performed by splitting the data interval into uniform pieces.</p>"},{"location":"data-access-tools/volume-server/how-it-works/#preserving-the-contour-level","title":"Preserving the contour level","text":"<p>Downsampling the data results in changing of absolute contour levels. To mitigate this effect, relative values are always used when displaying the data.</p> <ul> <li>Imagine the input data points are <code>A = [-0.3, 2, 0.1, 6, 3, -0.4]</code>: </li> <li>Downsampling using every other value results in <code>B = [-0.3, 0.1, 3]</code>.</li> <li>The \"range\" of the data went from (-0.4, 6) to (-0.3,3).</li> <li>Attempting to use the same absolute contour level on both \"data sets\" will likely yield very different results.</li> <li>The effect is similar if instead of skipping values they are averaged (or weighted averaged in the case of the <code>[1 4 6 4 1]</code> kernel) only not as severe.</li> <li>As a result, the \"absolute range\" of the data changes, some outlier values are lost, but the mean and relative proportions (i.e. deviation <code>X</code> from mean in <code>Y = mean + sigma * X</code>) are preserved. </li> </ul>"},{"location":"data-access-tools/volume-server/how-it-works/#compression-analysis","title":"Compression Analysis","text":"<ul> <li>Downsampling: <code>i-th</code> level (starting from zero) reduces the size by approximate factor <code>1/[(2^i)^3]</code> (i.e. \"cubic\" of the frequency).</li> <li>BinaryCIF: CCP4 mode 2 (32 bit floats) is reduced by factor of 4, CCP4 mode 1 (16bit integers) by factor of 2, CCP4 mode 0 (just bytes) is not reduced. This is done by single byte quantization, but smarter than CCP4 mode 0</li> <li>Gzip, from observation:</li> <li>Gzipping BinaryCIF reduces the size by factor ~2 - ~7 (2 for \"dense\" data such as x-ray density, 7 for sparse data such such an envelope of a virus)</li> <li>Gzipping CCP4 reduces the size by 10-25% (be it mode 2 or 0)</li> <li>Applying the downsampling kernel helps with the compression ratios because it smooths out the values.</li> </ul>"},{"location":"data-access-tools/volume-server/how-it-works/#toy-example","title":"Toy example:","text":"<pre><code>Start with 3.5GB compressed density data in the CCP4 mode 2 format (32-bit float for each value)\n    =&gt; ~4GB uncompressed CCP4\n    =&gt; Downsample by 1/4 =&gt; 4GB * (1/4)^3 = 62MB\n    =&gt; Convert to BinaryCIF =&gt; 62MB / 4 = ~16MB\n    =&gt; Gzip: 2 - 8 MB depending on the \"density\" of the data \n        (e.g. a viral shell data will be smaller because it is \"empty\" inside)\n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/","title":"VolumeServer: Response Data Format","text":"<p>This document describes the CIF categories and fields generated by the server.</p>"},{"location":"data-access-tools/volume-server/response-data-format/#query-info","title":"Query info","text":"<p>The reponse always contains a data block called <code>SERVER</code> with this format:</p> <pre><code>data_SERVER\n#\n_density_server_result.server_version     0.9.0 \n_density_server_result.datetime_utc       '2017-03-09 20:35:45' \n_density_server_result.guid               f69581b4-6b48-4fa4-861f-c879b4323688 \n_density_server_result.is_empty           no \n_density_server_result.has_error          no \n_density_server_result.error              . \n_density_server_result.query_source_id    xray/1cbs \n_density_server_result.query_type         box \n_density_server_result.query_box_type     cartesian \n_density_server_result.query_box_a[0]     14.555 \n_density_server_result.query_box_a[1]     16.075001 \n_density_server_result.query_box_a[2]     9.848 \n_density_server_result.query_box_b[0]     29.302999 \n_density_server_result.query_box_b[1]     35.737 \n_density_server_result.query_box_b[2]     32.037001 \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#query-data","title":"Query data","text":"<p>If the query completed successfully with a non-empty result the response will contain one or more data blocks that correpond to the \"channels\" present in the data (e.g. for x-ray data there will be <code>2Fo-Fc</code> and <code>Fo-Fc</code>) channels.</p> <p>The format is this:</p> <pre><code>data_2FO-FC\n#\n_volume_data_3d_info.name                         2Fo-Fc \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#axis-order","title":"Axis order","text":"<p>Axis order determines the order of axes of <code>origin</code>, <code>dimensions</code> and <code>sample_count</code> fields. It also specifies the order of values in <code>_volume_data_3d.values</code>. <code>0</code> = X axis, <code>1</code> = Y axis, <code>2</code> = Z axis.</p> <pre><code>_volume_data_3d_info.axis_order[0]                0 \n_volume_data_3d_info.axis_order[1]                1 \n_volume_data_3d_info.axis_order[2]                2  \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#origin-and-dimensions","title":"Origin and dimensions","text":"<p>Specifies the fractional coordinates of the bounding box of the data present in the data block.</p> <pre><code>_volume_data_3d_info.origin[0]                    -0.5 \n_volume_data_3d_info.origin[1]                    -0.5 \n_volume_data_3d_info.origin[2]                    -0.5 \n_volume_data_3d_info.dimensions[0]                1 \n_volume_data_3d_info.dimensions[1]                1 \n_volume_data_3d_info.dimensions[2]                1 \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#sample-rate","title":"Sample rate","text":"<p>Determines how many values of the original input data were collapsed in to 1 value.</p> <pre><code>_volume_data_3d_info.sample_rate                  8 \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#sample-count","title":"Sample count","text":"<p>Determines how many values in <code>_volume_data_3d.values</code> are present along each axis (in <code>axis_order</code>).</p> <pre><code>_volume_data_3d_info.sample_count[0]              96 \n_volume_data_3d_info.sample_count[1]              96 \n_volume_data_3d_info.sample_count[2]              96 \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#spacegroup-information","title":"Spacegroup information","text":"<pre><code>_volume_data_3d_info.spacegroup_number            1 \n_volume_data_3d_info.spacegroup_cell_size[0]      798.72 \n_volume_data_3d_info.spacegroup_cell_size[1]      798.72 \n_volume_data_3d_info.spacegroup_cell_size[2]      798.72 \n_volume_data_3d_info.spacegroup_cell_angles[0]    90 \n_volume_data_3d_info.spacegroup_cell_angles[1]    90 \n_volume_data_3d_info.spacegroup_cell_angles[2]    90 \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#values-info","title":"Values info","text":"<p>Contains mean, standard deviation, min, and max values for the entire (i.e. not just the slice present in response) original and the downsampled data. Both types of values are present  so that relative iso-levels can be estimated when sampling changes between queries.</p> <pre><code>_volume_data_3d_info.mean_source                  0.026747 \n_volume_data_3d_info.mean_sampled                 0.026748 \n_volume_data_3d_info.sigma_source                 1.129252 \n_volume_data_3d_info.sigma_sampled                0.344922 \n_volume_data_3d_info.min_source                   -19.308199 \n_volume_data_3d_info.min_sampled                  -2.692016 \n_volume_data_3d_info.max_source                   26.264214 \n_volume_data_3d_info.max_sampled                  3.533172 \n</code></pre>"},{"location":"data-access-tools/volume-server/response-data-format/#values","title":"Values","text":"<p>The values are stored in the <code>_volume_data_3d.values</code> loop containg <code>sample_count[0] * sample_count[1] * sample_count[2]</code> values. <code>axis_order[0]</code> is the axis that changes the fastest, <code>axis_order[2]</code> is the axis that changes the slowest, same as in the CCP4 format).</p> <pre><code>loop_\n_volume_data_3d.values\n-0.075391 \n-0.078252 \n-0.078161 \n...\n</code></pre>"},{"location":"extensions/struct-conn/","title":"wwPDB StructConn extension","text":"<p>The STRUCT_CONN category in the mmCIF file format contains details about the connections between portions of the structure. These can be hydrogen bonds, salt bridges, disulfide bridges and so on (see more at https://mmcif.wwpdb.org/dictionaries/mmcif_pdbx_v40.dic/Categories/struct_conn.html).</p> <p>wwPDB StructConn extension in Mol* provides functionality to retrieve and visualize these connections.</p> <p>The extension exposes three functions, located in <code>src/extensions/wwpdb/struct-conn/index.ts</code>. </p> <ul> <li><code>getStructConns</code> - to retrieve struct_conn records from a loaded structure</li> <li><code>inspectStructConn</code> - to visualize a struct_conn</li> <li><code>clearStructConnInspections</code> - to remove visulizations created by <code>inspectStructConn</code></li> </ul>"},{"location":"extensions/struct-conn/#example-1","title":"Example 1","text":"<p>The following example is a minimal HTML using this functionality:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"icon\" href=\"./favicon.ico\" type=\"image/x-icon\"&gt;\n        &lt;title&gt;Mol* Viewer&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"molstar.css\" /&gt;\n    &lt;/head&gt;\n    &lt;body style=\"margin: 0px;\"&gt;\n        &lt;div style=\"position: absolute; width: 100%; height: 10%; padding-block: 10px;\"&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'disulf1');\"&gt;disulf1&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'disulf2');\"&gt;disulf2&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'covale1');\"&gt;covale1&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'covale2');\"&gt;covale2&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'covale3');\"&gt;covale3&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'covale4');\"&gt;covale4&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'metalc1');\"&gt;metalc1&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'metalc2');\"&gt;metalc2&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'metalc3');\"&gt;metalc3&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, '5elb', 'metalc4');\"&gt;metalc4&lt;/button&gt;\n            &lt;button onclick=\"molstar.PluginExtensions.wwPDBStructConn.clearStructConnInspections(molstarViewer.plugin, '5elb');\"&gt;CLEAR&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div id=\"app\" style=\"position: absolute; top: 10%; width: 100%; height: 90%;\"&gt;&lt;/div&gt;\n        &lt;script type=\"text/javascript\" src=\"./molstar.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            var molstarViewer;\n            molstar.Viewer.create('app', { layoutIsExpanded: false }).then(viewer =&gt; {\n                molstarViewer = viewer;\n                viewer.loadPdb('5elb');\n            });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The PDB ID (<code>'5elb'</code>) can be replaced be <code>undefined</code>, in which case the functions will apply to the first loaded structure.</p>"},{"location":"extensions/struct-conn/#example-2","title":"Example 2","text":"<p>This is a more elaborated example, which automatically loads <code>5elb</code> (or any PDB entry given in the URL after <code>?pdb=</code>), retrieves the list of struct_conns, and creates a button for each struct_conn. </p> <p>Be aware that some of the struct_conns may be present in the deposited model but not in the preferred assembly (default view). The presented example will raise a dialog window with error message in such cases, e.g. <code>disulf6</code> in entry <code>5elb</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;link rel=\"icon\" href=\"./favicon.ico\" type=\"image/x-icon\"&gt;\n        &lt;title&gt;Mol* Viewer - StructConn Extension Demo&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"molstar.css\" /&gt;\n    &lt;/head&gt;\n    &lt;style&gt;\n        body { margin: 0px; }\n        #app { position: absolute; width: 85%; height: 100%; }\n        #controls { position: absolute; right: 0; width: 15%; height: 100%; display: flex; flex-direction: column; overflow-y: scroll; }\n        h1 { text-align: center; margin: 12px; font-weight: bold; font-size: 120%; }\n        button { margin: 4px; margin-top: 0px; }\n    &lt;/style&gt;\n    &lt;body&gt;\n        &lt;div id=\"app\"&gt;&lt;/div&gt;\n        &lt;div id=\"controls\"&gt;\n            &lt;h1 id=\"pdb-id\"&gt;Loading...&lt;/h1&gt;\n            &lt;button onclick=\"clearInspections();\"&gt;CLEAR&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;script type=\"text/javascript\" src=\"./molstar.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            var pdbId = window.location.search.match(/[?&amp;]pdb=(\\w+)/i)?.[1]?.toLowerCase() ?? '5elb';\n            var molstarViewer;\n            function inspect(structConnId) {\n                if (molstarViewer?.plugin) {\n                    molstar.PluginExtensions.wwPDBStructConn.inspectStructConn(molstarViewer.plugin, pdbId, structConnId).then(nSelectedAtoms =&gt; {\n                        if (nSelectedAtoms &lt; 2) alert('Some of the interacting atoms were not found :(\\n(maybe not present in the viewed assembly)');\n                    });\n                }\n            }\n            function clearInspections() {\n                if (molstarViewer?.plugin) {\n                    molstar.PluginExtensions.wwPDBStructConn.clearStructConnInspections(molstarViewer.plugin, pdbId);\n                }\n            }\n            molstar.Viewer.create('app', { layoutIsExpanded: false }).then(viewer =&gt; {\n                molstarViewer = viewer;\n                return viewer.loadPdb(pdbId);\n            }).then(() =&gt; {\n                const structConns = molstar.PluginExtensions.wwPDBStructConn.getStructConns(molstarViewer.plugin, pdbId);\n                const controls = document.getElementById('controls');\n                for (const structConnId in structConns) {\n                    const button = document.createElement('button');\n                    button.innerText = structConnId;\n                    button.addEventListener('click', () =&gt; inspect(structConnId));\n                    controls.appendChild(button);\n                };\n                document.getElementById('pdb-id').innerHTML = pdbId;\n            });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"extensions/tunnels/","title":"Tunnel Visualization Extension","text":"<p>This documentation outlines the usage of the Mol extension for visualizing tunnels in molecular structures. The extension integrates with Mol to render 3D representations of tunnels using specified data sources and properties.</p> <p>The extension is a key component in ChannelsDB, enabling users to visualize tunnels within molecules directly from the database. While it is used with ChannelsDB, users can also input their own data or connect to different databases, ensuring versatility across various research environments.</p>"},{"location":"extensions/tunnels/#data-types","title":"Data Types","text":"<p>The primary data types involved in tunnel visualization are:</p>"},{"location":"extensions/tunnels/#tunnel","title":"Tunnel","text":"<p>A Tunnel object contains the actual tunnel data necessary for visualization. It consists of:</p> <ul> <li><code>data</code>: An array of <code>Profile</code> objects that describe the tunnel at various points.</li> <li><code>props</code>: Properties such as the tunnel's type, ID, and optional labels or descriptions.</li> </ul>"},{"location":"extensions/tunnels/#profile","title":"Profile","text":"<p>A <code>Profile</code> object in a <code>Tunnel</code> holds detailed geometric and physical properties of a tunnel at specific points along its length. These properties include:</p> <ul> <li><code>Charge</code>: The electric charge at a specific point in the tunnel.</li> <li><code>Radius</code>: The overall radius of the tunnel at this point.</li> <li><code>FreeRadius</code>: The radius of the tunnel not obstructed by any molecular elements.</li> <li><code>T</code>: Temperature factor or a similar property related to the point.</li> <li><code>Distance</code>: Distance along the tunnel's path from the start.</li> <li><code>X</code>, <code>Y</code>, <code>Z</code>: Coordinates of the point in 3D space.</li> </ul> <p>These profiles are crucial for understanding the physical and chemical environment inside the tunnel, allowing for detailed analysis and visualization.</p> <p>Example: <pre><code>\"Profile\": [\n    {\n        \"Radius\": 1.49,\n        \"FreeRadius\": 1.49,\n        \"T\": 0,\n        \"Distance\": 0,\n        \"X\": -19.152,\n        \"Y\": -22.654,\n        \"Z\": -13.034,\n        \"Charge\": 0\n    },\n    {\n        \"Radius\": 1.524,\n        \"FreeRadius\": 1.524,\n        \"T\": 0.00625,\n        \"Distance\": 0.087,\n        \"X\": -19.162,\n        \"Y\": -22.596,\n        \"Z\": -12.969,\n        \"Charge\": 0\n    },\n    {\n        \"Radius\": 1.56,\n        \"FreeRadius\": 1.56,\n        \"T\": 0.0125,\n        \"Distance\": 0.174,\n        \"X\": -19.171,\n        \"Y\": -22.539,\n        \"Z\": -12.905,\n        \"Charge\": 0\n    }\n]\n</code></pre></p>"},{"location":"extensions/tunnels/#transformers-usage","title":"Transformers Usage","text":"<p>The extension uses several transformations to process and visualize tunnel data:</p>"},{"location":"extensions/tunnels/#tunnels-data-transformer","title":"Tunnels Data Transformer","text":"<ul> <li><code>Purpose</code>: Converts a collection of Tunnel data into a state object.</li> <li><code>Usage</code>:     <pre><code>update.toRoot().apply(TunnelsFromRawData, { data: tunnels });\n</code></pre></li> </ul>"},{"location":"extensions/tunnels/#tunnel-data-provider","title":"Tunnel Data Provider","text":"<ul> <li><code>Purpose</code>: Converts single Tunnel data into a state object for individual processing.</li> <li><code>Usage</code>:     <pre><code>update.toRoot().apply(TunnelFromRawData, { \n    data: { \n        data: tunnel.Profile, \n        props: { id: tunnel.Id, type: tunnel.Type } \n    } \n});\n</code></pre></li> </ul>"},{"location":"extensions/tunnels/#tunnel-shape-provider","title":"Tunnel Shape Provider","text":"<ul> <li><code>Purpose</code>: Provides the shapes for rendering the tunnel based on WebGL context and shape parameters.</li> <li><code>Usage</code>:     <pre><code>update.apply(TunnelShapeProvider, {\n    webgl,\n}).apply(StateTransforms.Representation.ShapeRepresentation3D);\n</code></pre></li> </ul>"},{"location":"extensions/tunnels/#visualization-examples","title":"Visualization Examples","text":"<p>To help users understand how to use these transformations in practice, include detailed examples:</p>"},{"location":"extensions/tunnels/#visualizing-multiple-tunnels","title":"Visualizing Multiple Tunnels","text":"<p>This example (runVisualizeTunnels) demonstrates how to visualize multiple tunnels from a fetched dataset. <pre><code>update.toRoot()\n        .apply(TunnelsFromRawData, { data: tunnels })\n        .apply(SelectTunnel)\n        .apply(TunnelShapeProvider, { webgl })\n        .apply(StateTransforms.Representation.ShapeRepresentation3D);\n</code></pre></p>"},{"location":"extensions/tunnels/#visualizing-a-single-tunnel","title":"Visualizing a Single Tunnel","text":"<p>This example (runVisualizeTunnel) shows how to visualize a single tunnel. <pre><code>update.toRoot()\n        .apply(TunnelFromRawData, { \n            data: { \n                data: tunnel.Profile,\n                props: { id: tunnel.Id, type: tunnel.Type }\n            }\n        })\n        .apply(TunnelShapeProvider, { webgl })\n        .apply(StateTransforms.Representation.ShapeRepresentation3D);\n</code></pre></p>"},{"location":"extensions/mvs/","title":"MolViewSpec","text":"<p>Please see the standalone MolViewSpec documentation.</p>"},{"location":"misc/interesting-pdb-entries/","title":"Interesting PDB Entries","text":"<ul> <li>Cyclic polymers (1sfi, 6dny, 1HVZ)</li> <li>B-DNA (1bna)</li> <li>Missing carbonyl oxygen (1gfl)</li> <li>Mono-saccharides with alt locs (1B5F)</li> <li>Microheterogeneity<ul> <li>Protein (1EJG, 3NIR)</li> <li>DNA (3VOK)</li> </ul> </li> <li>PNA: peptide nucleic acid (5eme, 1xj9)</li> <li>Peptide derived residues<ul> <li>GFP chromophores (5Z6Y)</li> </ul> </li> <li>Nucleotides that don\u2019t have a parent base set, i.e. detect purine/pyrimidine from geometry (THX in 1AUL, OMC in e.g. 5D3G)</li> <li>Bases with modified ring atoms<ul> <li>DZ has C1 instead of N1 (e.g. 6I4N)</li> <li>DP has N5 instead of C5 and C7 instead of N7 (e.g. 6I4N)</li> </ul> </li> <li>Beta &amp; Gamma peptides (e.g. 1GAC, 6PQF)</li> <li>Helices of D-amino acids (e.g. 7QDI)</li> <li>Mixed (heterogeneous) all-atom/trace-only RNA model (1JGQ)</li> <li>Polymers with residues with missing trace atoms (e.g. 2QFJ)</li> <li>Modified RNA bases (1y26, 5L4O)</li> <li>Discontinuous chains, i.e. gaps in the sequence (3sn6)</li> <li>Lots of sheets (1cbs)</li> <li>DNA (2np2, 1d66)</li> <li>C-alpha only (2rcj)</li> <li>Not cyclic, but termini are backbone-only and within distance but seqIds are not compatible (6SW3)</li> <li>Close backbone atoms but not linked (e.g. 4HIV)</li> <li>Non-standard residues<ul> <li>Protein (1BRR, 5Z6Y)</li> <li>DNA (5D3G)</li> <li>Collagen (6JEC)</li> </ul> </li> <li>Multiple models with different sets of ligands or missing ligands (1J6T, 1VRC, 2ICY, 1O2F)</li> <li>Long linear sugar chain (4HG6)</li> <li>Anisotropic B-factors/Ellipsoids (1EJG)</li> <li>NOS bridges (LYS-CSO in 7B0L, 6ZWJ, 6ZWH)</li> <li>Non-polymer components in polymer entities<ul> <li>PN2 in 1F80</li> <li>ACE (many, e.g. 5AGU, 1E1X)</li> <li>ACY in 7ABY</li> <li>NH2 (many, e.g. 6Y13)</li> </ul> </li> <li>Ligands with many rings<ul> <li>STU (e.g. 1U59) - many fused rings</li> <li>HT (e.g. 127D) - rings connected by a single bond</li> <li>J2C (e.g. 7EFJ) - rings connected by a single atom</li> <li>RBF (e.g. 7QF2) - three linearly fused rings</li> <li>TA1 (e.g. 1JFF) - many fused rings (incl. a 8-member rings)</li> <li>BPA (e.g. 1JDG) - many fused rings</li> <li>CLR (e.g. 3GKI) - four fused rings</li> </ul> </li> <li>Assembly symmetries<ul> <li>5M30 (Assembly 1, C3 local and pseudo)</li> <li>1RB8 (Assembly 1, I global)</li> </ul> </li> </ul>"},{"location":"plugin/cif-schemas/","title":"How CIF schemas work","text":"<p>CIF representation (simplified):</p> <pre><code>type Frame = (name: string) =&gt; Category | undefined // Frame is either a data block or a save frame\ntype Category = (name: string) =&gt; Field | undefined\ntype Field = { rowCount: number, getNumber: (row) =&gt; number, getString: (row) =&gt; string }\n</code></pre> <p>This is obviously not strongly typed and the \"fields\" don't know what type they are. To solve this, we create a type to describe what a field contains and how to map it to a \"typed column\":</p> <pre><code>type FieldSchema&lt;T&gt; = { T: T /* remember the type */, createColumn: (field: Field) =&gt; Column&lt;T&gt; }\n</code></pre> <p>where column is just a simple interface that returns a value of <code>T</code> for a given row:</p> <pre><code>type Column&lt;T&gt; = { rowCount: number, get: (row: number) =&gt; T }\n</code></pre> <p>Category schema is just an object whose properties are all instances of \"field schemas\", its \"shape\" has the type:</p> <pre><code>type CategorySchema = { [fieldName: string]: FieldSchema&lt;any&gt; }\n</code></pre> <p>We can declare our first category \"schema\":</p> <pre><code>const my_category = {\n  num_field: { T: 0 as number, createColumn: f =&gt; ({ rowCount: f.rowCount, get: f.getNumber }) }\n  str_field: { T: '' as string, createColumn: f =&gt; ({ rowCount: f.rowCount, get: f.getString }) }\n}\n</code></pre> <p>Notice that the type of <code>my_category</code> is not specified. Assigning it explictly would hide the actual property names which we do not want. Moreover, the names of the properties must match the names of the fields in the actual category (optionally, a field <code>alias</code> can be added to the field schema).</p> <p>Given a category schema, we need to construct a type that defines the typed category itself:</p> <pre><code>type TypedCategory&lt;Schema extends CategorySchema&gt; = { [F in keyof Schema]: Column&lt;Schema[F]['T']&gt; }\n</code></pre> <p>In other words, the type <code>TypedCategory</code> has a property of type <code>Column&lt;_&gt;</code> for each property of the schema. <code>Schema[F]['T']</code> just says: extract the type of property called <code>T</code> from property <code>F</code> in <code>Schema</code> (see mapped types in Typescript). <code>Schema extends CategorySchema</code> says that all properties of <code>Schema</code> must be of type <code>FieldSchema&lt;any&gt;</code>.</p> <p>Finally, we just define a mapping, <code>toTypedCategory</code>:</p> <pre><code>function toTypedCategory&lt;Schema extends CategorySchema&gt;(schema: Schema, category: Category): TypedCategory&lt;Schema&gt; {\n    const typedCategory: any = {};\n    for (const key in Object.keys(schema)) {\n        // remember a category is just a function that assigns a Field to a name\n        const field = category(key);\n        typedCategory[key] = field \n            ? schema[key].createFolumn(field)\n            : UndefinedColumn(schema[key].T); // a column that always returns 0 or empty string depending on type\n    }\n    return typedCategory;\n}\n</code></pre> <p>This transforms the ''untyped'' <code>Category</code> to some typed category and gives us code-completion for CIF files:</p> <pre><code>const typed = toTypedCategory(my_category, ...);\ntyped.n /* shows code completion for num_field */\nconst num = typed.num_field.get(0); /* num has type number number */\n</code></pre> <p>And that's all there is to it. Extending the types to the \"frame\" level is left as an exercise to the reader.</p> <p>The advantage of this approach is that the types are generated directly from the data. This means we only need to define them once (as opposed to defining the data interfaces separately) and on top of that, the \"schemas\" also serve as a template for how to actually performs the transformation to the typed version of CIF (again without the need to do this \"manually\" except the one time definition of the schema).</p> <p>This concept is further abstracted as <code>mol-base/collections/database</code>.</p> <p>Note: To create a type alias for a category defined this way we can do:</p> <pre><code>type MyCategory = TypedCategory&lt;typeof my_category&gt;\nfunction makeMyTypedCategory(c: Category): MyCategory { return toTypedCategory(my_category, c); }\n</code></pre>"},{"location":"plugin/data-state/","title":"Plugin State Representation","text":"<p>The state of the plugin is represented by a JS Object with these components (described in more detail below):</p> <pre><code>interface Snapshot {\n    // Snapshot of data state tree\n    data?: State.Snapshot,\n    // Snapshot of behavior state tree\n    behaviour?: State.Snapshot,\n    // Snapshot for current animation,\n    animation?: PluginAnimationManager.Snapshot,\n    // Saved camera positions\n    cameraSnapshots?: CameraSnapshotManager.StateSnapshot,\n    canvas3d?: {\n        // Current camera position\n        camera?: Camera.Snapshot,\n        // Viewport properties such as background color\n        viewport?: Canvas3DProps\n    }\n}\n</code></pre> <p>When defining the state object, all components are optional, i.e., it is possible to define just the <code>data</code> component.</p> <p>Example state is available here. In the plugin, it is possible to create and load these objects using <code>Download JSON</code>  and <code>Open JSON</code> buttons in the <code>State Snapshots</code> section.</p>"},{"location":"plugin/data-state/#state-tree","title":"State Tree","text":"<p>The data and behavior of the plugin is stored in a tree data structure implemented in the <code>mol-state</code> module. This data structure  strictly separates the definition of the state with its actual instantiation, similar to the relation of HTML and DOM in web browsers.</p> <p>The snapshot itself is a JS Object with these components</p> <pre><code>interface State.Snapshot {\n    tree: StateTree.Serialized\n}\n\ninterface StateTree.Serialized {\n    // Transforms serialized in pre-order\n    // The first transform must always be a special \"root\" node with ref: '-=root=-'\n    transforms: [Transform.Serialized, StateObjectCell.State][]\n}\n\ninterface Transform.Serialized {\n    // id of the parent transform\n    parent: string,\n    // id of the corresponding transformer\n    transformer: string,\n    // parameters of the transform\n    params: any,\n    // Properties\n    props: Transform.Props,\n    // reference to this transform node (a unique string, can be UUID)\n    ref: string,\n    // version of the node (a unique string, can be UUID)\n    version: string\n}\n\ninterface Transform.Props {\n    // tag used in state related operation\n    tag?: string\n    // is the node visible in the UI\n    isGhost?: boolean,\n    // is the node bound to its parent? (shown as a single node in the UI)\n    isBinding?: boolean\n}\n</code></pre> <p>\"Built-in\" data state transforms and description of their parameters are defined in <code>mol-plugin/state/transforms</code>. Behavior transforms are defined in <code>mol-plugin/behavior</code>.</p>"},{"location":"plugin/data-state/#animation-state","title":"Animation State","text":"<p>Defined by <code>CameraSnapshotManager.StateSnapshot</code> in <code>mol-plugin/state/animation/manager.ts</code>.</p>"},{"location":"plugin/data-state/#canvas3d-state","title":"Canvas3D State","text":"<p>Defined by <code>Canvas3DParams</code> in <code>mol-canvas3d/canvas3d.ts</code>.</p>"},{"location":"plugin/data-state/#camera-snapshots","title":"Camera Snapshots","text":"<p>The camera position (defined in <code>mol-canvas3d/camera.ts</code>) is a plain JS object with the type:</p> <pre><code>interface Camera.Snapshot {\n    mode: Mode, // = 'perspective' | 'orthographic'\n\n    position: Vec3, // array with [x, y, z]\n    // Normalized camera direction\n    direction: Vec3, // array with [x, y, z]\n    up: Vec3, // array with [x, y, z]\n    target: Vec3, // array with [x, y, z]\n\n    near: number,\n    far: number,\n    fogNear: number,\n    fogFar: number,\n\n    fov: number,\n    zoom: number\n}\n</code></pre> <p>The <code>cameraSnapshots</code> component of the state are defined in <code>mol-plugin/state/camera.ts</code></p> <pre><code>interface CameraSnapshotManager.StateSnapshot {\n    entries: Entry[]\n}\n\ninterface Entry {\n    id: UUID, // or any string\n    timestamp: string, // timestamp usually in UTC format\n    name?: string, // optional name\n    description?: string, // optional description\n    snapshot: Camera.Snapshot\n}\n</code></pre>"},{"location":"plugin/examples/","title":"Plugin Examples","text":"<p>Refer to Mol* Apps and Examples.</p>"},{"location":"plugin/file-formats/","title":"File Formats","text":"<p>Support file formats and their extensions.</p>"},{"location":"plugin/file-formats/#structure","title":"Structure","text":"<ul> <li>MMCIF and CIFCORE (mmCIF and coreCIF schemas): cif, bcif, mmcif, mcif</li> <li>GRO: gro</li> <li>MOL: mol</li> <li>MOL2: mol2</li> <li>PDB/PDBQT: pdb, ent, pdbqt</li> <li>SDF: sdf, sd</li> <li>XYZ: xyz</li> </ul>"},{"location":"plugin/file-formats/#topology","title":"Topology","text":"<p>Need to be loaded together with Coordinates.</p> <ul> <li>PRMTOP: prmtop, parm7</li> <li>PSF: psf</li> <li>TOP: top</li> </ul>"},{"location":"plugin/file-formats/#coordinates","title":"Coordinates","text":"<p>Need to be loaded together with a Structure or Topology.</p> <ul> <li>DCD: dcd</li> <li>NCTRAJ: nc, nctraj</li> <li>TRR: trr</li> <li>XTC: xtc</li> </ul>"},{"location":"plugin/file-formats/#volume","title":"Volume","text":"<ul> <li>CCP4/MRC/MAP: ccp4, mrc, map</li> <li>CUBE (may include a Structure): cub, cube</li> <li>DSN6/BRIX: dsn6, brix</li> <li>DX and DXBIN: dx, dxbin</li> <li>DSCIF (DensityServer CIF schema): cif, bcif</li> </ul>"},{"location":"plugin/file-formats/#shape","title":"Shape","text":"<ul> <li>PLY</li> </ul>"},{"location":"plugin/instance/","title":"Creating Plugin Instance","text":""},{"location":"plugin/instance/#intro","title":"Intro","text":"<p>What is a plugin? A plugin is a collection of modules that provide functionality to the <code>Mol*</code> UI. The plugin is responsible for managing the state of the viewer, internal and user interactions. It has been a previous point of confusion for new users of <code>Mol*</code> to associate the viewer part of the library with what is further referred to as the plugin. These two are closely connected in the <code>molstar-plugin-ui</code> module, which is the user-facing part of the library and ultimately provides the viewer, but they are ultimately distinct. </p> <p>It is recommended that you inspect the general class structure of <code>PluginInitWrapper</code>, <code>PluginUIContext</code> and <code>PluginUIComponent</code> to better understand the flow of data and events in the plugin.  A passing analogy is that a  <code>PluginContext</code>  is the engine that powers computation, rendering, events and subscriptions inside the molstar UI. All UI components depend on <code>PluginContext</code>. </p> <p>There are 4 basic ways of instantiating the Mol* plugin.</p>"},{"location":"plugin/instance/#viewer-wrapper","title":"<code>Viewer</code> wrapper","text":"<ul> <li>The most basic usage is to use the <code>Viewer</code> wrapper. This is best suited for use cases that do not require much custom behavior and are mostly about just displaying a structure.</li> <li>See <code>Viewer</code> class is defined in src/apps/viewer/app.ts for available methods and options.</li> </ul> <p>Example usage without using WebPack:</p> <pre><code>&lt;style&gt;\n    #app {\n        position: absolute;\n        left: 100px;\n        top: 100px;\n        width: 800px;\n        height: 600px;\n    }\n&lt;/style&gt;\n&lt;!-- \n    molstar.js and .css are obtained from\n    - the folder build/viewer after cloning and building the molstar package \n    - from the build/viewer folder in the Mol* NPM package\n--&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"molstar.css\" /&gt;\n&lt;script type=\"text/javascript\" src=\"./molstar.js\"&gt;&lt;/script&gt;\n\n&lt;div id=\"app\"&gt;&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    molstar.Viewer.create('app', {\n        layoutIsExpanded: false,\n        layoutShowControls: false,\n        layoutShowRemoteState: false,\n        layoutShowSequence: true,\n        layoutShowLog: false,\n        layoutShowLeftPanel: true,\n\n        viewportShowExpand: true,\n        viewportShowSelectionMode: false,\n        viewportShowAnimation: false,\n\n        pdbProvider: 'rcsb',\n        emdbProvider: 'rcsb',\n    }).then(viewer =&gt; {\n        viewer.loadPdb('7bv2');\n        viewer.loadEmdb('EMD-30210', { detail: 6 });\n    });\n&lt;/script&gt;\n</code></pre> <p>When using WebPack (or possibly other build tool) with the Mol* NPM package installed, the viewer class can be imported using </p> <pre><code>import { Viewer } from 'molstar/build/viewer/molstar'\n\nfunction initViewer(target: string | HTMLElement) {\n    return new Viewer(target, { /* options */})\n}\n</code></pre>"},{"location":"plugin/instance/#plugincontext-with-built-in-react-ui","title":"<code>PluginContext</code> with built-in React UI","text":"<ul> <li>For more customization options it is possible to use the <code>PluginContext</code> directly.</li> <li>When creating the plugin instance it is possible to customize the <code>PluginSpec</code>.</li> <li>The default <code>PluginSpec</code> is available here.</li> <li><code>PluginConfig</code> object provides additional customization options.</li> <li>See the Viewer State Management section for more information on customizing things like background.</li> <li>See the Data State Management section for more information on build the state.</li> </ul> <pre><code>import { DefaultPluginUISpec, PluginUISpec } from 'molstar/lib/mol-plugin-ui/spec';\nimport { createPluginUI } from 'molstar/lib/mol-plugin-ui';\nimport { renderReact18 } from 'molstar/lib/mol-plugin-ui/react18';\nimport { PluginConfig } from 'molstar/lib/mol-plugin/config';\n\nconst MySpec: PluginUISpec = {\n    ...DefaultPluginUISpec(),\n    config: [\n        [PluginConfig.VolumeStreaming.Enabled, false]\n    ]\n}\n\nasync function createPlugin(parent: HTMLElement) {\n    const plugin = await createPluginUI({\n      target: parent,\n      spec: MySpec,\n      render: renderReact18\n    });\n\n    const data = await plugin.builders.data.download({ url: '...' }, { state: { isGhost: true } });\n    const trajectory = await plugin.builders.structure.parseTrajectory(data, format);\n    await this.plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default');\n\n    return plugin;\n}\n\ncreatePlugin(document.getElementById('app')!); // app is a &lt;div&gt; element with position: relative\n</code></pre> <p>To use the plugin (with the React UI) inside another React app:</p> <p>A single-plugin setup is shown the example below. In order to initialize multiple plugins, each with its own context and viewport, some extra steps are required (docs section to be added).</p> <pre><code>import { useEffect, createRef } from \"react\";\nimport { createPluginUI } from \"molstar/lib/mol-plugin-ui\";\nimport { renderReact18 } from \"molstar/lib/mol-plugin-ui/react18\";\nimport { PluginUIContext } from \"molstar/lib/mol-plugin-ui/context\";\n/*  Might require extra configuration,\nsee https://webpack.js.org/loaders/sass-loader/ for example.\ncreate-react-app should support this natively. */\nimport \"molstar/lib/mol-plugin-ui/skin/light.scss\";\n\ndeclare global {\n  interface Window {\n    molstar?: PluginUIContext;\n  }\n}\n\n\nexport function MolStarWrapper() {\n  const parent = createRef&lt;HTMLDivElement&gt;();\n\n  // In debug mode of react's strict mode, this code will\n  // be called twice in a row, which might result in unexpected behavior.\n  useEffect(() =&gt; {\n    async function init() {\n        window.molstar = await createPluginUI({\n          target: parent.current as HTMLDivElement,\n          render: renderReact18\n        });\n\n        const data = await window.molstar.builders.data.download(\n          { url: \"https://files.rcsb.org/download/3PTB.pdb\" }, /* replace with your URL */\n          { state: { isGhost: true } }\n        );\n        const trajectory =\n          await window.molstar.builders.structure.parseTrajectory(data, \"pdb\");\n        await window.molstar.builders.structure.hierarchy.applyPreset(\n          trajectory,\n          \"default\"\n        );\n    }\n    init();\n    return () =&gt; {\n      window.molstar?.dispose();\n      window.molstar = undefined;\n    };\n  }, []);\n\n  return &lt;div ref={parent} style={{ width: 640, height: 480 }}/&gt;;\n}\n</code></pre> <p>Furthermore, if it is desirable in your project to use the <code>molstar</code>'s React UI components, but you wish to alter or rearrange the layout, you should take a look at the signatures of  <code>PluginUIComponent</code>  which every \"control\" subclasses. </p> <p> <code>SequenceView</code> , for example, can be used separately from the <code>PluginUI</code>. Yet you would need to pass the <code>PluginUIContext</code> to it in order for it to observe the changes in the state of the plugin. This can be done via a <code>PluginContextContainer</code>: <pre><code>// your_app.plugin: PluginUIContext\n...\n&lt;div className=\"your_custom_ui\"&gt;\n  &lt;PluginContextContainer plugin={your_app.plugin}&gt;\n    &lt;SequenceView /&gt;\n  &lt;/PluginContextContainer&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"plugin/instance/#directly-using-mol-react-ui","title":"Directly using Mol* React UI","text":"<pre><code>class MolStarWrapper {\n  private resolveInit: () =&gt; void;\n  initialized = new Promise&lt;boolean&gt;(res =&gt; { this.resolveInit = () =&gt; res(true); });\n\n  private initCalled = false;\n  plugin: PluginUIContext;\n  async init() {\n    if (this.initCalled) return;\n    this.initCalled = true;\n    this.plugin = ...;\n    await this.plugin.init();\n    this.resolveInit();\n  }\n}\n\nfunction MolStar({ model }: { model: MolStarWrapper }) {\n  const [initialized, setInitialized] = useState(false);\n  useEffect(() =&gt; {\n     async function init() {\n       await model.init();\n       setInitialized(true);\n     }\n     init();\n  }, [model]);\n\n  if (!initialized) return &lt;&gt;Loading&lt;/&gt;;\n  return &lt;div style={{ ..., position: 'relative' }}&gt;\n    &lt;Plugin plugin={model.plugin} /&gt;\n  &lt;/div&gt;;\n}\n</code></pre>"},{"location":"plugin/instance/#plugincontext-without-built-in-react-ui","title":"<code>PluginContext</code> without built-in React UI","text":"<ul> <li>The <code>PluginContext</code> can be instantiated without using the default React UI.</li> </ul> <pre><code>&lt;div id='molstar-parent' style='position: absolute; top: 0; left: 0; right: 0; bottom: 0'&gt;\n    &lt;canvas id='molstar-canvas' style='position: absolute; top: 0; left: 0; right: 0; bottom: 0'&gt;&lt;/canvas&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>import { DefaultPluginSpec, PluginSpec } from 'molstar/lib/mol-plugin/spec';\nimport { PluginContext  } from 'molstar/lib/mol-plugin/context';\nimport { PluginConfig } from 'molstar/lib/mol-plugin/config';\n\nconst MySpec: PluginSpec = {\n    ...DefaultPluginSpec(),\n    config: [\n        [PluginConfig.VolumeStreaming.Enabled, false]\n    ]\n}\n\nasync function init() {\n    const plugin = new PluginContext(MySpec);\n    await plugin.init();\n\n    const canvas = &lt;HTMLCanvasElement&gt; document.getElementById('molstar-canvas');\n    const parent = &lt;HTMLDivElement&gt; document.getElementById('molstar-parent');\n\n    if (!plugin.initViewer(canvas, parent)) {\n        console.error('Failed to init Mol*');\n        return;\n    }\n\n    // Example url:\"https://files.rcsb.org/download/3j7z.pdb\" \n    // Example url:\"https://files.rcsb.org/download/5AFI.cif\" \n    const data = await plugin.builders.data.download({ url: '...' }, { state: { isGhost: true } });\n    const trajectory = await plugin.builders.structure.parseTrajectory(data, format); //format is 'mmcif' or 'pdb' etc.\n    await plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default');\n}\n</code></pre>"},{"location":"plugin/instance/#canvas3d-without-built-in-state-management","title":"<code>Canvas3D</code> without built-in state management","text":"<ul> <li>The <code>PluginContext</code> object from the above examples can be completely omitted.</li> <li>See Browser Tests for example usage.</li> </ul> <pre><code>const canvas = document.getElementById('canvas'); // parent &lt;canvas&gt; element\nconst canvas3d = Canvas3D.create(Canvas3DContext.fromCanvas(canvas));\ncanvas3d.animate();\n// use the canvas3d object here\n</code></pre>"},{"location":"plugin/selections/","title":"Selections","text":"<p>Assuming you have a model already loaded into the plugin (see Creating Plugin Instance), these are some of the following method you can select structural data.</p>"},{"location":"plugin/selections/#selecting-directly-from-the-hierarchy-manager","title":"Selecting directly from the <code>hierarchy</code> manager","text":"<p>One can select a subcomponent's data directly from the plugin manager.</p> <pre><code>import { Structure } from '../mol-model/structure';\n\nconst ligandData = plugin.managers.structure.hierarchy.selection.structures[0]?.components[0]?.cell.obj?.data;\nconst ligandLoci = Structure.toStructureElementLoci(ligandData as any);\n\nplugin.managers.camera.focusLoci(ligandLoci);\nplugin.managers.interactivity.lociSelects.select({ loci: ligandLoci });\n</code></pre>"},{"location":"plugin/selections/#selection-callbacks","title":"Selection callbacks","text":"<p>If you want to subscribe to selection events (e.g. to change external state in your application based on a user selection), you can use: <code>plugin.behaviors.interaction.click.subscribe</code></p> <p>Here's an example of passing in a React \"set\" function to update selected residue positions. <pre><code>import {\n  Structure,\n  StructureProperties,\n} from \"molstar/lib/mol-model/structure\"\n// setSelected is assumed to be a \"set\" function returned by useState\n// (selected: any[]) =&gt; void\nplugin.behaviors.interaction.click.subscribe(\n  (event: InteractivityManager.ClickEvent) =&gt; {\n    const selections = Array.from(\n      plugin.managers.structure.selection.entries.values()\n    );\n    // This bit can be customized to record any piece information you want\n    const localSelected: any[] = [];\n    for (const { structure } of selections) {\n      if (!structure) continue;\n      Structure.eachAtomicHierarchyElement(structure, {\n        residue: (loc) =&gt; {\n          const position = StructureProperties.residue.label_seq_id(loc);\n          localSelected.push({ position });\n        },\n      });\n    }\n    setSelected(localSelected);\n  }\n)\n</code></pre></p>"},{"location":"plugin/selections/#molscript-language","title":"<code>Molscript</code> language","text":"<p>Molscript is a language for addressing crystallographic structures and is a part of the Mol* library found at <code>https://github.com/molstar/molstar/tree/master/src/mol-script</code>. It can be used against the Molstar plugin as a query language and transpiled against multiple external molecular visualization libraries(see here).</p>"},{"location":"plugin/selections/#querying-a-structure-for-a-specific-chain-and-residue-range-select-residues-with-12res_id200-of-chain-with-auth_asym_ida","title":"Querying a structure for a specific chain and residue range (select residues with 12&lt;res_id&lt;200 of chain with auth_asym_id==A) :","text":"<pre><code>import { compileIdListSelection } from 'molstar/lib/mol-script/util/id-list'\n\nconst query = compileIdListSelection('A 12-200', 'auth');\nwindow.molstar?.managers.structure.selection.fromCompiledQuery('add',query);\n</code></pre>"},{"location":"plugin/selections/#selection-queries","title":"Selection Queries","text":"<p>Another way to create a selection is via a <code>SelectionQuery</code> object. This is a more programmatic way to create a selection. The following example shows how to select a chain and a residue range using a <code>SelectionQuery</code> object. This relies on the concept of <code>Expression</code> which is basically a intermediate representation between a Molscript statement and a selection query. </p>"},{"location":"plugin/selections/#select-residues-10-15-of-chains-a-and-f-in-a-structure-using-a-selectionquery-object","title":"Select residues 10-15 of chains A and F in a structure using a <code>SelectionQuery</code> object:","text":"<pre><code>import { MolScriptBuilder as MS, MolScriptBuilder } from 'molstar/lib/mol-script/language/builder';\nimport { Expression } from 'molstar/lib/mol-script/language/expression';\nimport {  StructureSelectionQuery } from 'molstar/lib/mol-plugin-state/helpers/structure-selection-query'\n\n\nexport function select_multiple() {\n\n const args = [['A', 10, 15], ['F', 10, 15]]\n const groups: Expression[] = [];\n for (var chain of args) {\n   groups.push(MS.struct.generator.atomGroups({\n     \"chain-test\": MS.core.rel.eq([MolScriptBuilder.struct.atomProperty.macromolecular.auth_asym_id(), chain[0]]),\n     \"residue-test\": MS.core.rel.inRange([MolScriptBuilder.struct.atomProperty.macromolecular.label_seq_id(), chain[1], chain[2]])\n   }));\n }\n var sq = StructureSelectionQuery('residue_range_10_15_in_A_and_F', MS.struct.combinator.merge(groups))\n mstar.managers.structure.selection.fromSelectionQuery('set', sq)\n}\n</code></pre> <p>Complex queries can be constructed by combining primitive queries at the level of [<code>chain-test</code>, <code>residue-test</code>, <code>entity-test</code>, etc] (https://github.com/molstar/molstar/blob/6edbae80db340134341631f669eec86543a0f1a8/src/mol-script/language/symbol-table/structure-query.ts#L88C4-L94C112) by combining them via logical connectives provided in the <code>MolscriptBuilder.core.rel</code> as above.</p> <p>Inspect these examples to get a better feeling for this syntax: <code>https://github.com/molstar/molstar/blob/6edbae80db340134341631f669eec86543a0f1a8/src/mol-plugin-state/helpers/structure-selection-query.ts#L88-L580</code></p> <p>Furthermore, a query made this way can be converted to a <code>Loci</code> object which is important in many parts of the libary: <pre><code>// Select residue 124 of chain A and convert to Loci\nconst Q = MolScriptBuilder;\nvar sel = Script.getStructureSelection(Q =&gt; Q.struct.generator.atomGroups({\n                'chain-test'  : Q.core.rel.eq([Q.struct.atomProperty.macromolecular.auth_asym_id(), A]),\n                \"residue-test\": Q.core.rel.eq([Q.struct.atomProperty.macromolecular.label_seq_id(), 124]),\n              }), objdata)\n\nlet loci = StructureSelection.toLociWithSourceUnits(sel);\n</code></pre></p>"},{"location":"plugin/viewer-state/","title":"Viewer State Management","text":""},{"location":"plugin/viewer-state/#canvas3d-properties","title":"<code>Canvas3D</code> Properties","text":"<p>Properties of the <code>Canvas3D</code> can be  changed using <code>PluginCommands</code>.  </p>"},{"location":"plugin/viewer-state/#change-background-highlight-or-select-color","title":"Change background, highlight, or select color","text":"<p><pre><code>import { ColorNames } from 'molstar/lib/mol-util/color/names';\nimport { PluginCommands } from 'molstar/lib/mol-plugin/commands';\n\nconst renderer = plugin.canvas3d!.props.renderer;\nPluginCommands.Canvas3D.SetSettings(plugin, { settings: { renderer: { ...renderer, backgroundColor: ColorNames.red /* or: 0xff0000 as Color */ } } });\n</code></pre> Similarly, <code>highlightColor</code> and <code>selectColor</code> can be updated.</p>"},{"location":"plugin/viewer-state/#interactivity","title":"Interactivity","text":"<p>Interactivity in Mol* is based on the concept of <code>Loci</code>. A <code>Loci</code> usually references a collection of objects and can be created by a <code>Selection</code>. For example, the <code>Loci</code> captures all atoms in the chain with label_asym_id B of a protein: <pre><code>import { Script } from 'molstar/lib/mol-script/script';\nimport { StructureSelection } from 'molstar/lib/mol-model/structure/query';\n\nconst data = plugin.managers.structure.hierarchy.current.structures[0]?.cell.obj?.data;\nif (!data) return;\n\nconst selection = Script.getStructureSelection(Q =&gt; Q.struct.generator.atomGroups({\n    'chain-test': Q.core.rel.eq(['B', Q.ammp('label_asym_id')])\n}), data);\nconst loci = StructureSelection.toLociWithSourceUnits(selection);\n</code></pre> A <code>Loci</code> can be used to trigger custom <code>Behaviors</code>.</p>"},{"location":"plugin/viewer-state/#log-message-to-mol-console","title":"Log message to Mol* console","text":"<p>The built-in console in the bottom center of the plugin shows log entries. <pre><code>plugin.log.message('This message will appear in the Mol* console');\n</code></pre> Other log levels are: <code>info</code>, <code>warn</code>, and <code>error</code>.</p>"},{"location":"plugin/viewer-state/#show-toast-message","title":"Show toast message","text":"<p>Toast messages will appear in the bottom right of the plugin and will linger for a limited time before disappearing. <pre><code>import { PluginCommands } from 'molstar/lib/mol-plugin/commands';\n\nPluginCommands.Toast.Show(plugin, {\n    title: 'Custom Message',\n    message: 'A custom toast message that will disappear after 2 seconds.',\n    key: 'toast-custom',\n    timeoutMs: 2000\n});\n</code></pre></p>"},{"location":"plugin/viewer-state/#behaviors","title":"Behaviors","text":"<p>The state of the Mol* plugin is usually governed by dynamic behaviors which can be set up in initial plugin specification or updated during the plugin runtime. This allows for high modularity and customizability of individual plugin instances.</p>"},{"location":"plugin/viewer-state/#highlight-loci","title":"Highlight <code>Loci</code>","text":"<p>Highlighting adds a transient overpaint to a representation that will linger until the mouse enters hovers over another  object. Highlights can be applied to a previously defined <code>Loci</code> by: <pre><code>plugin.managers.interactivity.lociHighlights.highlightOnly({ loci }); // loci: Loci\n</code></pre> Reset all highlights by: <pre><code>plugin.managers.interactivity.clearHighlights();\n</code></pre></p>"},{"location":"plugin/viewer-state/#select-loci","title":"Select <code>Loci</code>","text":"<p>Selected elements will appear with distinct visuals and, if applicable, the corresponding sequence positions will be  shown in the Sequence Viewer panel. Selections persist until removed, for example by clicking the background. A <code>Loci</code> is selected by: <pre><code>plugin.managers.interactivity.lociSelects.select({ loci }); // loci: Loci\n</code></pre></p> <p>Deselect a specific <code>Loci</code> by: <pre><code>plugin.managers.interactivity.lociSelects.deselect({ loci }); // loci: Loci\n</code></pre> To deselect everything: <pre><code>plugin.managers.interactivity.lociSelects.deselectAll();\n</code></pre></p>"},{"location":"plugin/viewer-state/#focus-loci","title":"Focus <code>Loci</code>","text":"<p>The focus representation shows a <code>Loci</code> in ball-and-stick representation and, additionally, visualizes non-covalent interactions between atoms of the <code>Loci</code> as well as interactions with surrounding residues (default: 5 \u00c5). <pre><code>plugin.managers.structure.focus.setFromLoci(loci);\n</code></pre> Extend an existing focus representation by: <pre><code>plugin.managers.structure.focus.addFromLoci(loci); // loci: Loci\n</code></pre> Reset by: <pre><code>plugin.managers.structure.focus.clear();\n</code></pre></p>"},{"location":"plugin/viewer-state/#zoom-loci","title":"Zoom <code>Loci</code>","text":"<p>A <code>Loci</code> can also be used to manipulate the camera. Zoom in by: <pre><code>plugin.managers.camera.focusLoci(loci); // loci: Loci\n</code></pre></p> <p>Restore the default camera position by: <pre><code>plugin.managers.camera.reset();\n</code></pre></p>"},{"location":"plugin/viewer-state/#turn-off-view-resetting-on-new-representations","title":"Turn off view resetting on new representations","text":"<p>A new representation via something like <pre><code>.apply(StateTransforms.Representation.VolumeRepresentation3D, ...)\n</code></pre> can reset the view to make the whole representation visible. When one wants to keep the view the same instead of having the rep reset the view, keep the view constant by: <pre><code>plugin.canvas3d?.setProps({ camera: { manualReset: true } });\n</code></pre></p>"},{"location":"plugin/transforms/custom-trajectory/","title":"Load Trajectory from a Custom Format","text":"<p>This section shows a high level example for loading trajectory from custom data in specialized plugin instances. A more complete solution is available for example in form of the G3D format extension.</p>"},{"location":"plugin/transforms/custom-trajectory/#defining-and-using-a-custom-transformer","title":"Defining and Using a Custom Transformer","text":"<pre><code>import { StateTransformer } from 'molstar/lib/mol-state';\n\nconst CreateTransformer = StateTransformer.builderFactory('custom-namespace');\n\nexport interface CustomTrajectoryData {\n    // ...\n}\n\nexport const TrajectoryFromCustomData = CreateTransformer({\n    name: 'trajectory-from-custom-data',\n    display: 'Trajectory',\n    from: PluginStateObject.Root,\n    to: PluginStateObject.Molecule.Trajectory,\n    params: {\n        data: PD.Value&lt;CustomTrajectoryData&gt;(void 0 as any, { isHidden: true }),\n    },\n})({\n    apply({ params }) {\n        return Task.create('Trajectory', async (ctx) =&gt; {\n            const models = await customParse(params.data, ctx);\n            return new PluginStateObject.Molecule.Trajectory(models, {\n                label: 'Trajectory',\n            });\n        });\n    },\n});\n</code></pre> <p>The <code>customParse</code> function can usually be implemented  by modifying/extending an existing parser already available in Mol*.</p> <p>To use the transformer:</p> <pre><code>const data: CustomTrajectoryData = await (await fetch(url)).json();\nconst trajectory = await plugin.build().toRoot().apply(TrajectoryFromCustomData, { data }).commit();\n// Create the representation\nawait plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default');\n</code></pre>"},{"location":"plugin/transforms/custom-trajectory/#using-mol-to-download-the-data","title":"Using Mol* to Download the Data","text":"<pre><code>export const TrajectoryFromCustomData = CreateTransformer({\n    name: 'trajectory-from-custom-data',\n    display: 'Trajectory',\n    from: PluginStateObject.Data.String, // or PluginStateObject.Data.Binary\n    to: PluginStateObject.Molecule.Trajectory,\n})({\n    apply({ a }) {\n        return Task.create('Trajectory', async (ctx) =&gt; {\n            const models = await customParse(a.data, ctx);\n            return new PluginStateObject.Molecule.Trajectory(models, {\n                label: 'Trajectory',\n            });\n        });\n    },\n});\n\n//////////////\n\nconst data = await plugin.builders.data.download({ url, isBinary });\nconst trajectory = await plugin.build().to(data).apply(TrajectoryFromCustomData, { data }).commit();\nawait plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default');\n</code></pre>"}]}